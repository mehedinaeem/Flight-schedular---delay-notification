-- Trigger for Deletion
DELIMITER //
CREATE TRIGGER after_flight_delete
AFTER DELETE ON flight
FOR EACH ROW
BEGIN
    DECLARE flight_number_var VARCHAR(10);
    SET flight_number_var = OLD.flight_number;

    -- Code to send email when a row is deleted
    CALL send_email_on_delete(flight_number_var);
END;
//
DELIMITER ;

-- Trigger for Update
DELIMITER //
CREATE TRIGGER after_flight_update
AFTER UPDATE ON flight
FOR EACH ROW
BEGIN
    DECLARE flight_number_var VARCHAR(10);
    SET flight_number_var = NEW.flight_number;

    -- Code to send email when a row is updated
    CALL send_email_on_update(flight_number_var);
END;
//
DELIMITER ;

-- Stored Procedure for Deletion (Email only)
DELIMITER //
CREATE PROCEDURE send_email_on_delete(IN flight_number_param VARCHAR(10))
BEGIN
    DECLARE recipient_email VARCHAR(50);

    -- Retrieve recipient email based on flight_number
    SELECT email INTO recipient_email
    FROM user_info
    WHERE flight_number = flight_number_param;

    -- Send email only if user_info entry exists
    IF recipient_email IS NOT NULL THEN
        CALL send_email(recipient_email, 'Flight Update', 'Your booked flight has been canceled.');
    END IF;
END;
//
DELIMITER ;

-- Stored Procedure for Update (Email only)
DELIMITER //
CREATE PROCEDURE send_email_on_update(IN flight_number_param VARCHAR(10))
BEGIN
    DECLARE recipient_email VARCHAR(50);

    -- Retrieve recipient email based on flight_number
    SELECT email INTO recipient_email
    FROM user_info
    WHERE flight_number = flight_number_param;

    -- Send email only if user_info entry exists
    IF recipient_email IS NOT NULL THEN
        CALL send_email(recipient_email, 'Flight Update', 'Your booked flight details have been updated.');
    END IF;
END;
//
DELIMITER ;
